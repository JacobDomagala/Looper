name: Ubuntu

on:
  push:
    branches:
      - master
  pull_request:

env:
  BUILD_TYPE: Release
  SDK_VERSION: 1.3.268.0
  CXX: clang++-15
  CC: clang-15

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - name: Setup Environment
      run: |
        sudo apt-get update

        sudo apt-get install -y xorg-dev llvm-dev iwyu clang++-15 libx11-xcb-dev libxcb-render-util0-dev \
        libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev \
        libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev libxcb-dri3-dev \
        libxcb-util-dev libxcb-cursor-dev libx11-dev libfontenc-dev libice-dev libsm-dev libxau-dev libxaw7-dev \
        libxcb-glx0-dev libxcb-dri2-0-dev libxcb-present-dev libxcb-composite0-dev libxcb-ewmh-dev libxcb-res0-dev

        pip install conan

        wget https://sdk.lunarg.com/sdk/download/$SDK_VERSION/linux/vulkansdk-linux-x86_64-$SDK_VERSION.tar.xz
        tar xf vulkansdk-linux-x86_64-$SDK_VERSION.tar.xz

        cmake -E make_directory ${{runner.workspace}}/build

    - name: Cache Conan packages
      id: cache-conan
      uses: actions/cache@v3
      with:
        path: ~/.conan/data
        key: conan-cache-${{ hashFiles('**/conanfile.txt') }}

    - name: Install dependencies with Conan
      working-directory: ${{runner.workspace}}/build
      run: |
        conan profile detect
        conan install $GITHUB_WORKSPACE --output-folder=build --build=missing --settings=build_type=$BUILD_TYPE -s compiler.cppstd=gnu20

    - name: Run CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        source ${{runner.workspace}}/Looper/$SDK_VERSION/setup-env.sh
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DWARNINGS_AS_ERRORS=ON -DENABLE_INCLUDE_WHAT_YOU_USE=OFF\
           -DENABLE_SANITIZER_ADDRESS=ON -DENABLE_SANITIZER_UNDEFINED_BEHAVIOR=OFF -DENABLE_SANITIZER_LEAK=ON -DUNITY_BUILD=ON\
           -DCMAKE_TOOLCHAIN_FILE=build/conan_toolchain.cmake

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: |
        cmake --build . --config $BUILD_TYPE  2> >(tee "output.txt")

    - name: Post PR comment for warnings/errors
      if: ${{ always() }} && github.ref != 'refs/heads/master'
      uses: JacobDomagala/CompileResultAction@master
      with:
        comment_title: UBUNTU COMPILE RESULT
        compile_result_file: ${{runner.workspace}}/build/output.txt
        exclude_dir: ${{github.workspace}}/dependencies
